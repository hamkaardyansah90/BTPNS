*-----------------------------------------------------------------------------
* <Rating>-20</Rating>
*-----------------------------------------------------------------------------
*-----------------------------------------------------------------------------
* <Rating>-1</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE IDI.IN.GET.LAST.BAL(Y.RET.VALUE)
**ROUTINE TO GET LAST.BALANCE WITHDRAWAL(WORKING.BAL - AMT TRANSACTION)
**MODIFIED RTN TO REDUCE AVAIL.AMT REDUCE WITH FEE AMT IN JOURNAL.PAR
**MODIFIED TO GET LOCK AMOUNT

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.IDIH.WS.DATA.FT.MAP
    $INSERT I_F.ACCOUNT
    $INSERT I_IDI.WS.INC.PRE.PROCESS.COMMON
    $INSERT I_F.ACCT.GROUP.CONDITION
    $INSERT ../IMB.BP I_F.IDIH.AC.LOCKED.AMT
    $INSERT I_F.IDIH.IN.FT.JOURNAL.PAR

*DEBUG
    Y.RET.VALUE = ''
    Y.FEE.AMT = ''

    FINDSTR 'IN.UNIQUE.ID' IN Y.MSG.SHARE SETTING AP,VP,SP THEN
        Y.IN.UNIQUE.ID = Y.MSG.SHARE<AP,2>
    END ELSE
        Y.IN.UNIQUE.ID = 'NO'
    END

    FN.FT.MAP = 'F.IDIH.WS.DATA.FT.MAP'
    F.FT.MAP = ''
    CALL OPF(FN.FT.MAP,F.FT.MAP)

    FN.ACCT = 'F.ACCOUNT'
    F.ACCT = ''
    CALL OPF(FN.ACCT,F.ACCT)

    FN.ACC.GRP = 'F.ACCT.GROUP.CONDITION'
    F.ACC.GRP = ''
    CALL OPF(FN.ACC.GRP,F.ACC.GRP)

    FN.LOCK.AMT = 'F.IDIH.AC.LOCKED.AMT'
    F.LOCK.AMT = ''
    CALL OPF(FN.LOCK.AMT,F.LOCK.AMT)

**MODIFIED RTN TO REDUCE AVAIL.AMT REDUCE WITH FEE AMT IN JOURNAL.PAR
    FN.JRN.PAR = 'F.IDIH.IN.FT.JOURNAL.PAR'
    F.JRN.PAR = ''
    CALL OPF(FN.JRN.PAR,F.JRN.PAR)

    CALL F.READ(FN.FT.MAP,Y.ID.OFS,R.FT.MAP,F.FT.MAP,ERR)
    Y.ACCT = R.FT.MAP<WS.DATA.FT.DEBIT.ACCT.NO>
    Y.AMT.TRX = R.FT.MAP<WS.DATA.FT.CREDIT.AMOUNT>

    CALL F.READ(FN.ACCT,Y.ACCT,R.ACCT,F.ACCT,ERR.ACCT)
    Y.WORK.BAL = R.ACCT<AC.WORKING.BALANCE>
    Y.CON.GROUP = R.ACCT<AC.CONDITION.GROUP>
    Y.ACC.CUR = R.ACCT<AC.CURRENCY>
    Y.ID.GRP = Y.CON.GROUP:Y.ACC.CUR

    CALL F.READ(FN.ACC.GRP,Y.ID.GRP,R.ACC.GRP,F.ACC.GRP,ERR)
    Y.MIN.BAL = R.ACC.GRP<ACCT.GRP.MINIMUM.BAL>

    CALL GET.LOC.REF('ACCOUNT','IDI.LOCK.AMT',Y.IDI.LOCK.AMOUNT.POS)

    Y.LOCKED.AMT = ''

*SEL.ACCT.LOCK = "SELECT ":FN.LOCK.AMT:" WITH ACCOUNT EQ ":Y.ACCT

*CALL EB.READLIST(SEL.ACCT.LOCK, SEL.LIST, '',NO.OF.REC,ERR.SEL.ACCT)

*LOOP
*REMOVE Y.ID FROM SEL.LIST SETTING POS

*WHILE Y.ID:POS
*CALL F.READ(FN.LOCK.AMT, Y.ID, R.AC.LOCKED, F.LOCK.AMT, ERR.LOCK.AMT)
*Y.TODATE = R.AC.LOCKED<ACLOCK.TO.DATE>

*IF Y.TODATE GE TODAY OR Y.TODATE EQ '' THEN
*Y.LOCKED.AMT += R.AC.LOCKED<ACLOCK.AMOUNT>
*END
*REPEAT

** GET LOCK AMOUNT FROM LOCAL TABLE IN ACCOUNT
    Y.LOCKED.AMT = R.ACCT<AC.LOCAL.REF, Y.IDI.LOCK.AMOUNT.POS>

**MODIFIED RTN TO REDUCE AVAIL.AMT REDUCE WITH FEE AMT IN JOURNAL.PAR
    IF Y.IN.UNIQUE.ID NE 'NO' THEN
        CALL F.READ(FN.JRN.PAR,Y.IN.UNIQUE.ID,R.JRN.PAR,F.JRN.PAR,ERR)
        IF R.JRN.PAR NE '' THEN
            Y.FEE.AMT = R.JRN.PAR<JOURNAL.PAR.DEFAULT.AMT>
        END ELSE
            Y.FEE.AMT = 0
        END
    END ELSE
        Y.FEE.AM = 0
    END
*---------------------------------------------------------------------
    Y.AVAIL.BAL = Y.WORK.BAL - Y.MIN.BAL - Y.LOCKED.AMT - Y.FEE.AMT

    Y.RET.VALUE = Y.AVAIL.BAL:'.00'

    RETURN
END





































