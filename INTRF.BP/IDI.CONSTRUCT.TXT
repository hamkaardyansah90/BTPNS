*-----------------------------------------------------------------------------
* <Rating>-57</Rating>
*-----------------------------------------------------------------------------
    SUBROUTINE IDI.CONSTRUCT.TXT(Y.OUTPUT)

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_IDI.CONST.OUTPUT.RTN.COMMON
    $INSERT I_F.IDIH.CONST.OUTPUT.MAPPING
    $INSERT I_IDIB.GEN.FT.MAP.DATA.COMMON
    GOSUB INIT
    GOSUB PROCESS
    GOSUB WRITE

    RETURN

INIT:

    Y.SOURCE.REC = R.OUT.MAPP<CONST.OUT.SOURCE.RECORD>
    Y.ID.RECORD = FIELD(Y.ADDITIONAL.INFO.COM,'|',1)
    Y.DICT.OUT = FIELD(Y.ADDITIONAL.INFO.COM,'|',2)
    Y.TITLE.OUT = FIELD(Y.ADDITIONAL.INFO.COM,'|',3)

*<LHM
    FN.SOURCE.NAME = "../bnk.run/":Y.DICT.OUT
    F.SOURCE.NAME = ""
    OPEN FN.SOURCE.NAME TO F.SOURCE.NAME ELSE
        TEXT = "CANNOT OPEN SOURCE FILE FOLDER"
    END
    Y.HEADER.TXT = R.OUT.MAPP<CONST.OUT.HEADER.TXT>
    CALL @Y.HEADER.TXT(Y.HEADER.OUT)
*>

*case untuk mengambil data dari suatu record(R.APP) atau version (R.NEW) atau ENQUIRY (ENQ.DATA)
*saat ini yang berfungsi masih yang READ , karena kebutuhan yang mendesak . :*
    BEGIN CASE
    CASE Y.SOURCE.REC EQ 'READ'
*        CALL GET.LOC.REF('IDIH.CONST.OUTPUT.MAPPING','RTN.SOURCE',RTN.SRC.POS)
*        Y.RTN.SOURCE = R.OUT.MAPP<CONST.OUT.LOCAL.REF, RTN.SRC.POS>
        Y.RTN.SOURCE = R.OUT.MAPP<CONST.OUT.RTN.SOURCE>
        CALL @Y.RTN.SOURCE(Y.ID.RECORD,Y.APPLICATION.READ,R.APP)
        CALL GET.STANDARD.SELECTION.DETS(Y.APPLICATION.READ,R.SS.2)
        CALL FIELD.NAMES.TO.NUMBERS("LOCAL.REF",R.SS.2,Y.FIELD.REF.APP.NO,YAF,YAV,YAS,DATA.TYPE,ERR.MSG)
        Y.ID = Y.ID.RECORD
    CASE Y.SOURCE.REC EQ 'VERSION'
        Y.ID = ID.NEW
    CASE Y.SOURCE.REC EQ 'ENQUIRY'
        Y.ID = 'ENQUIRY'
    END CASE

    RETURN

PROCESS:

    Y.FIELD.SOURCE = R.OUT.MAPP<CONST.OUT.FIELD.SRC>
    Y.DELIMITER = R.OUT.MAPP<CONST.OUT.DELIMITER>
    Y.METHOD.TYPE = R.OUT.MAPP<CONST.OUT.METHOD.TYPE>
    Y.VALUE.CONSTANT = R.OUT.MAPP<CONST.OUT.VALUE.CONS>
    Y.PGM.VALUE = R.OUT.MAPP<CONST.OUT.PGM.VALUE>
    Y.FIELD.LRT = R.OUT.MAPP<CONST.OUT.FIELD.LRT>

    CONVERT VM TO FM IN Y.FIELD.SOURCE
    CONVERT VM TO FM IN Y.METHOD.TYPE
    CONVERT VM TO FM IN Y.VALUE.CONSTANT
    CONVERT VM TO FM IN Y.PGM.VALUE
    CONVERT VM TO FM IN Y.FIELD.LRT

    Y.COUNT.FIELD.SRC = DCOUNT(Y.FIELD.SOURCE,FM)

*Proses untuk mengolah perfield .
    FOR I = 1 TO Y.COUNT.FIELD.SRC
        Y.VALUE = ''
        BEGIN CASE
        CASE Y.METHOD.TYPE<I> = 'INT'
            GOSUB GET.VALUE.RECORD
        CASE Y.METHOD.TYPE<I> = 'CON'
            Y.VALUE = Y.VALUE.CONSTANT<I>
        CASE Y.METHOD.TYPE<I> = 'RTN'
            Y.PGM.VALUE.TEMP = Y.PGM.VALUE<I>
            CALL @Y.PGM.VALUE.TEMP(Y.RET.VALUE)
            Y.VALUE = Y.RET.VALUE
        END CASE
        Y.VALUE.ALL<-1> = Y.VALUE
    NEXT I

*Mengubah FM menjadi delimiter yang ditentukan di parameter .
    CONVERT FM TO Y.DELIMITER IN Y.VALUE.ALL

    RETURN

GET.VALUE.RECORD:

    IF Y.FIELD.LRT<I> = 'YES' THEN
        CALL GET.LOC.REF(Y.APPLICATION.READ,Y.FIELD.SOURCE<I>,Y.POS)
        Y.VALUE = R.APP<Y.FIELD.REF.APP.NO,Y.POS,1>
    END
    ELSE
        CALL FIELD.NAMES.TO.NUMBERS(Y.FIELD.SOURCE<I>,R.SS.2,Y.FIELD.APP.NO,YAF,YAV,YAS,DATA.TYPE,ERR.MSG)
        Y.VALUE = R.APP<Y.FIELD.APP.NO>
    END

    RETURN

WRITE:

*Open file/folder
    OPENSEQ Y.DICT.OUT,Y.TITLE.OUT TO F.OUTPUT
    ELSE
        Y.CREATE.FOLDER = 'CREATE.FILE ':Y.DICT.OUT:' TYPE=UD'
        EXECUTE Y.CREATE.FOLDER
    END

*<LHM
    Y.FILENAME = Y.TITLE.OUT
    CALL F.READ(FN.SOURCE.NAME, Y.FILENAME, R.POINTER, F.SOURCE.NAME, Y.ERR.SOURCE)
    IF NOT(R.POINTER) THEN
        Y.VALUE.ALL = Y.HEADER.OUT: CHAR(10) :Y.VALUE.ALL
    END
*>

*Menulis ke textfile
    WRITESEQ Y.VALUE.ALL APPEND TO F.OUTPUT ELSE
        CRT " Unable to perform WRITESEQ : ": Y.VALUE.ALL
    END

*Done
    CLOSESEQ F.OUTPUT

    RETURN

END



