*-----------------------------------------------------------------------------
* <Rating>-13</Rating>
* 14:28:25 05 JAN 2017 
* AT240301D01/btpnsqua 
*-----------------------------------------------------------------------------
    SUBROUTINE IDIE.ACCOUNT.STATEMENT.INTF(Y.DATA)

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_ENQUIRY.COMMON
    $INSERT I_F.STMT.ENTRY
    $INSERT I_F.ACCT.ACTIVITY
    $INSERT I_F.ACCOUNT

    GOSUB INITIALISE
    GOSUB SELECTION
    GOSUB PROCESS
RETURN

*-----------------------------------------------------------------------------
INITIALISE:
* Open al required files
* Initialize required variables
*-----------------------------------------------------------------------------
    FN.STMT = 'FBNK.STMT.ENTRY';            F.STMT = '';        CALL OPF(FN.STMT, F.STMT)
    FN.STMT.PRIN = 'F.STMT.PRINTED';        F.STMT.PRIN = '';   CALL OPF(FN.STMT.PRIN,F.STMT.PRIN)
    FN.ACCT.ACTIV = 'FBNK.ACCT.ACTIVITY';   F.ACCT.ACTIV = '';  CALL OPF(FN.ACCT.ACTIV,F.ACCT.ACTIV)
    FN.AC = 'F.ACCOUNT';                    F.AC = '';          CALL OPF(FN.AC, F.AC)

    Y.DATA = ''
    Y.CURRENT.BALANCE = ''
    Y.DATA.WRITE = ''
    Y.ACC.STMT = ''
    Y.ACC.STMT.LS = ''
    Y.ID.STMT = ''
    Y.RUNNING.BALANCE = 0
    CUR.COUNT = 0
    TOT.COUNT = 1

    Y.AC.ID = ''
    Y.IN.PRM.ACC.NO.SEL = ''
    Y.IN.TRN.DT.TM.SEL = ''
    Y.IN.STAN = ''
    Y.IN.CHANNEL.CDE = ''
    Y.RET.REVERSAL.ID.SEL = ''
    Y.IN.TERM.ID.SEL = ''
    Y.IN.BENEF.BANK= ''
    Y.IN.LOCATION = ''
    Y.IN.UNIQUE.ID = ''
    Y.SETTLE.DATE = ''
    Y.IN.NETWORK.ID = ''
    Y.BLANK = ''
    Y.CHQ.NO = 0
RETURN

*-----------------------------------------------------------------------------
SELECTION:
* Read passed enquiry selection criteria(s) 
*-----------------------------------------------------------------------------
    Y.FIELD = ENQ.SELECTION<2>
    
    FIND 'ACCOUNT' IN Y.FIELD SETTING POS1, POS2 THEN
        Y.AC.ID = ENQ.SELECTION<4,POS2>
    END

    LOCATE 'ACCT.STMT' IN Y.FIELD<1, 1> SETTING POSS THEN
        Y.ACC.STMT.LS = ENQ.SELECTION<4, POSS>
    END
    Y.ACC.STMT.LS = 7

    FIND 'IN.PRM.ACC.NO' IN Y.FIELD SETTING POSA, POSB THEN
        Y.IN.PRM.ACC.NO.SEL = ENQ.SELECTION<4,POSB>
    END

    FIND 'IN.TRNS.DT.TM' IN Y.FIELD SETTING POSC, POSD THEN
        Y.IN.TRN.DT.TM.SEL = ENQ.SELECTION<4,POSD>
    END

    FIND 'IN.STAN' IN Y.FIELD SETTING POSR, POSS THEN
        Y.IN.STAN = ENQ.SELECTION<4,POSS>
    END

    FIND 'IN.CHANNEL.CDE' IN Y.FIELD SETTING POSE, POSF THEN
        Y.IN.CHANNEL.CDE = ENQ.SELECTION<4,POSF>
    END

    FIND 'IN.REVERSAL.ID' IN Y.FIELD SETTING POSG, POSH THEN
        Y.RET.REVERSAL.ID.SEL = ENQ.SELECTION<4,POSH>
    END
    FIND 'IN.TERMINAL.ID' IN Y.FIELD SETTING POSJ, POSL THEN
        Y.IN.TERM.ID.SEL = ENQ.SELECTION<4,POSL>
    END

    FIND 'IN.BENEF.BANK' IN Y.FIELD SETTING POSP, POSQ THEN
        Y.IN.BENEF.BANK= ENQ.SELECTION<4,POSQ>
    END

    FIND 'IN.LOCATION' IN Y.FIELD SETTING POS1, POS2 THEN
        Y.IN.LOCATION = ENQ.SELECTION<4,POS2>
    END

    FIND 'IN.UNIQUE.ID' IN Y.FIELD SETTING POS3, POS4 THEN
        Y.IN.UNIQUE.ID = ENQ.SELECTION<4,POS4>
    END

    FIND 'SETTLE.DATE' IN Y.FIELD SETTING POS5, POS6 THEN
        Y.SETTLE.DATE = ENQ.SELECTION<4,POS6>
    END

    FIND 'IN.NETWORK.ID' IN Y.FIELD SETTING POS7, POS8 THEN
        Y.IN.NETWORK.ID = ENQ.SELECTION<4,POS8>
    END
RETURN

*-----------------------------------------------------------------------------
PROCESS:
* Do selection to STMT.PRINTED ordered descending, read and process STMT.ENTRY
* ids from the record using GET.DATA until required number of transactions is
* gathered 
* Append returned data (Y.DATA.WRITE) to Y.DATA variable
*-----------------------------------------------------------------------------
    CALL F.READ(FN.AC, Y.AC.ID, R.AC, F.AC, RET.AC)
    Y.CURR = R.AC<AC.CURRENCY>

    SEL.STMT.PRINTED = "SELECT FBNK.STMT.PRINTED BY.DSND @ID AND WITH @ID LIKE ":Y.AC.ID:"..."
    CALL EB.READLIST(SEL.STMT.PRINTED,SEL.LIST,'',NO.OF.REC,ERR)
    I.ACC.STMT = 1
    LOOP UNTIL TOT.COUNT GT Y.ACC.STMT.LS DO
        Y.STMT.PRINTED.ID = SEL.LIST<I.ACC.STMT>
        CALL F.READ(FN.STMT.PRIN,Y.STMT.PRINTED.ID,R.STMT.PRIN,F.STMT.PRIN,ERR)
        CUR.COUNT = DCOUNT(R.STMT.PRIN, @FM)
        FOR I.LOOP = CUR.COUNT TO 1 STEP -1
            Y.REC = R.STMT.PRIN<I.LOOP>
            GOSUB GET.DATA
            TOT.COUNT++
            IF Y.DATA EQ '' THEN
                Y.DATA = Y.DATA.WRITE
            END ELSE
                Y.DATA = Y.DATA.WRITE:FM:Y.DATA
            END 
            IF TOT.COUNT GT Y.ACC.STMT.LS THEN BREAK
        NEXT I.LOOP
        I.ACC.STMT++
    REPEAT
RETURN

*-----------------------------------------------------------------------------
GET.DATA:
* Get transaaction details for Y.REC/Y.ID.STMT
* If current balance is not yet set, use latest STMT.ENTRY record to read
* current balance from ACCT.ACTIVITY using GET.CURRENT.BALANCE
* Each transaction then update this running balance
* Prepare output data Y.DATA.WRITE
*-----------------------------------------------------------------------------
    Y.TIME = ''

    Y.ID.STMT = Y.REC
    GOSUB GET.STMT

    IF Y.CURRENT.BALANCE = '' THEN
        GOSUB GET.CURRENT.BALANCE
        Y.RUNNING.BALANCE = Y.CURRENT.BALANCE
    END
    Y.PRINT.BALANCE = Y.RUNNING.BALANCE

    IF Y.AMOUNT[1,1] EQ '-' THEN
        Y.RUNNING.BALANCE += Y.AMOUNT[2,99]
    END ELSE
        Y.RUNNING.BALANCE -= Y.AMOUNT
    END

    Y.CEK.DECIMAL = DCOUNT(Y.AMOUNT,".")
    IF Y.CEK.DECIMAL NE "2" THEN
        Y.AMOUNT := '.00'
    END
    Y.CEK.DECIMAL = DCOUNT(Y.PRINT.BALANCE,".")
    IF Y.CEK.DECIMAL NE "2" THEN
        Y.PRINT.BALANCE := '.00'
    END

    Y.DATA.WRITE  = Y.AC.ID:'*':Y.ID.STMT:'*':0:'*':Y.BLANK:'*':Y.BLANK:'*'
    Y.DATA.WRITE := Y.AMOUNT:'*':'*':Y.CHQ.NO:'*':Y.IN.PRM.ACC.NO.SEL:'*':Y.IN.TRN.DT.TM.SEL:'*'
    Y.DATA.WRITE := Y.IN.STAN:'*':Y.IN.CHANNEL.CDE:'*':Y.RET.REVERSAL.ID.SEL:'*':Y.IN.TERM.ID.SEL:'*':Y.IN.BENEF.BANK:'*'
    Y.DATA.WRITE := Y.IN.LOCATION:'*':Y.IN.UNIQUE.ID:'*':Y.SETTLE.DATE:'*':Y.IN.NETWORK.ID:'*':Y.PRINT.BALANCE
RETURN

*----------------------------------------------------------------------------
GET.STMT:
* Read STMT.ENTRY using passed STMT.ENTRY id
*-----------------------------------------------------------------------------
    R.STMT = ''
    CALL F.READ(FN.STMT, Y.ID.STMT, R.STMT, F.STMT, STMT.ERR)

    Y.TIME = R.STMT<AC.STE.DATE.TIME>
    Y.TRANS = R.STMT<AC.STE.TRANS.REFERENCE>
    Y.TRANS = FIELD(Y.TRANS,'\',1)
    Y.ACC.NO = R.STMT<AC.STE.ACCOUNT.NUMBER>
    IF Y.CURR EQ LCCY THEN
        Y.AMOUNT = R.STMT<AC.STE.AMOUNT.LCY>
    END ELSE
        Y.AMOUNT = R.STMT<AC.STE.AMOUNT.FCY>
    END
    Y.REC.STATUS = R.STMT<AC.STE.RECORD.STATUS>
    Y.STMT.VAL.DATE = R.STMT<AC.STE.VALUE.DATE>
RETURN

*-----------------------------------------------------------------------------
GET.CURRENT.BALANCE:
* Read latest balance from ACCT.ACTIVITY
*-----------------------------------------------------------------------------
    Y.DATE.ACTIV = Y.STMT.VAL.DATE[1,6]
    Y.DAY.ACTIV = Y.STMT.VAL.DATE[7,2]

    Y.ID.ACCT.ACTIV = Y.ACC.NO:'-':Y.DATE.ACTIV
    CALL F.READ(FN.ACCT.ACTIV,Y.ID.ACCT.ACTIV,R.ACCT.ACTIV,F.ACCT.ACTIV,ERR)
    Y.ACCT.ACTIV.DT = R.ACCT.ACTIV<IC.ACT.DAY.NO>

    FINDSTR Y.DAY.ACTIV IN Y.ACCT.ACTIV.DT SETTING AP,VP,SP THEN
        Y.CURRENT.BALANCE = R.ACCT.ACTIV<IC.ACT.BALANCE,VP>
    END
RETURN

END
