*-----------------------------------------------------------------------------
* <Rating>228</Rating>
* 18:33:00 22 MAR 2017 * 10:56:55 24 FEB 2017 * 15:47:59 23 FEB 2017 * 15:45:02 23 FEB 2017 * 15:37:22 23 FEB 2017 * 15:37:03 23 FEB 2017 * 15:36:21 23 FEB 2017 * 15:36:17 23 FEB 2017 * 15:11:42 23 FEB 2017 * 14:15:03 23 FEB 2017 
* AT240301D01/btpnsqua * AT240301D01/btpnsqua * AT240301D01/btpnsqua * AT240301D01/btpnsqua * AT240301D01/btpnsqua * AT240301D01/btpnsqua * AT240301D01/btpnsqua * AT240301D01/btpnsqua * AT240301D01/btpnsqua * AT240301D01/btpnsqua 
*-----------------------------------------------------------------------------
**(CREATE FT CHARGE FROM ENQUIRY HAVE CAHRGE)
**CREATE ATILHM(20151125)
**MODIFIED ATILHM(20151223) GET NARATION TO CHARGES BALANCE ENQUIRY OFFUS FROM CHARGE DESC IN JOURNAL.PAR
*-------------------------------------------------------------------------
** MODIFIED BY : GALUH GIGIH PRANATA ; * galuh.pranata@anabatic.com
** DATE        : 14 FEB 2017
** ACTIVITY    : Change logic to get Account Closed & Amend Information in IDIH.WS.DATA.FT.MAP
*-------------------------------------------------------------------------
** MODIFIED BY : GALUH GIGIH PRANATA ; * galuh.pranata@anabatic.com
** DATE        : 23 FEB 2017
** ACTIVITY    : Check balance before posting charge
*-------------------------------------------------------------------------
** MODIFIED BY : GALUH GIGIH PRANATA ; * galuh.pranata@anabatic.com
** DATE		   : 17 MAR 2017
** ACTIVITY    : Throw error if balance not enough for charges
*-------------------------------------------------------------------------

    SUBROUTINE IDIE.GEN.OFS.CHRG.ENQ(ENQ.DATA)

    $INSERT I_COMMON
    $INSERT I_EQUATE
    $INSERT I_F.DATES
    $INSERT I_F.FUNDS.TRANSFER
    $INSERT I_F.IDIH.WS.DATA.FT.MAP
    $INSERT I_F.IDIH.IN.FT.JOURNAL.PAR
    $INSERT I_F.ACCOUNT
    $INSERT I_IDI.WS.INC.PRE.PROCESS.COMMON
    $INSERT I_F.IDIH.WS.CONFIG.BATCH
    $INSERT I_F.USER
*$INSERT I_IDIE.GEN.OFS.CHRG.ENQ.COMMON
    $INSERT I_F.ACCT.GROUP.CONDITION
	$INSERT I_ENQUIRY.COMMON
	$INSERT I_F.IDIH.AC.LOCKED.AMT
	
    GOSUB INISIAL
    GOSUB GET.DATA
    IF Y.NO.FT EQ '' THEN
        GOSUB DO.PROCESS
    END
    RETURN
*-----------------------
INISIAL:
*-----------------------

    FN.WS.DATA = 'F.IDIH.WS.DATA.FT.MAP'
    F.WS.DATA = ''
    CALL OPF(FN.WS.DATA,F.WS.DATA)

    FN.JRN.PAR = 'F.IDIH.IN.FT.JOURNAL.PAR'
    F.JRN.PAR = ''
    CALL OPF(FN.JRN.PAR,F.JRN.PAR)

    FN.FUNDS.TRF = 'F.FUNDS.TRANSFER$HIS'
    F.FUND.TRF = ''
    CALL OPF(FN.FUNDS.TRF,F.FUNDS.TRF)

    FN.ACCT = 'FBNK.ACCOUNT'
    F.ACCT = ''
    CALL OPF(FN.ACCT,F.ACCT)

    FN.BATCH.CONF = 'F.IDIH.WS.CONFIG.BATCH'
    F.BATCH.CONF = ''
    CALL OPF(FN.BATCH.CONF,F.BATCH.CONF)

    FN.ACCT.HIST = 'FBNK.ACCOUNT$HIS'
    F.ACCT.HIST = ''
    CALL OPF(FN.ACCT.HIST,F.ACCT.HIST)

    FN.ACCL = 'F.ACCOUNT.CLOSED'
    F.ACCL = ''
    CALL OPF(FN.ACCL,F.ACCL)

    FN.ACCT.GRP.COND = 'F.ACCT.GROUP.CONDITION'
    F.ACCT.GRP.COND = ''
    CALL OPF(FN.ACCT.GRP.COND,F.ACCT.GRP.COND)

	FN.LOCK.AMT = 'F.IDIH.AC.LOCKED.AMT'
	F.LOCK.AMT = ''
	CALL OPF(FN.LOCK.AMT,F.LOCK.AMT)
	
    CALL GET.LOC.REF('ACCOUNT','IDI.LOCK.AMT',Y.LOCK.AMT)

*EMPTY PARAMETER USED
    Y.ACCT.DB = ''
    Y.ACCT.CR = ''
    Y.AMT.CHG = ''
    Y.FT.TRX.TYPE = ''
    Y.PAY.DTLS = ''
    Y.IN.PRM.ACC = ''
    Y.IN.STAN = ''
    Y.IN.CHN.ID = ''
    Y.TRNS.DTTM = ''
    Y.TERMINAL.ID = ''
    Y.LOCATION.ID = ''
    Y.UNIQUE.ID = ''
    Y.REV.ID = ''
    R.WS.DATA = ''
    Y.ID.DATA = ''
    Y.TRX.TYPE = ''
    Y.DB.CHG.ENQ = ''
    Y.CR.CHG.ENQ = ''
    R.ACCT.HIST = ''
    R.ACCT = ''


    RETURN
*-----------------------
GET.DATA:
*-----------------------

    Y.ID.DATA = Y.ID.REC.ENQ

    CALL F.READ(FN.WS.DATA, Y.ID.DATA, R.WS.DATA, F.WS.DATA, ERR)
*Y.PAY.DTLS = R.WS.DATA<WS.DATA.FT.PAYMENT.DETAILS>
    Y.IN.PRM.ACC = R.WS.DATA<WS.DATA.FT.IN.PRM.ACC.NO>
    Y.IN.STAN = R.WS.DATA<WS.DATA.FT.IN.STAN>
    Y.IN.CHN.ID = R.WS.DATA<WS.DATA.FT.IN.CHANNEL.ID>
    Y.TRNS.DTTM = R.WS.DATA<WS.DATA.FT.IN.TRNS.DT.TM>
    Y.TERMINAL.ID = R.WS.DATA<WS.DATA.FT.IN.TERMINAL.ID>
    Y.LOCATION.ID = R.WS.DATA<WS.DATA.FT.IN.LOCATION>
    Y.UNIQUE.ID = R.WS.DATA<WS.DATA.FT.IN.UNIQUE.ID>
    Y.REV.ID = R.WS.DATA<WS.DATA.FT.IN.REVERSAL.ID>
    Y.DB.ACCT = R.WS.DATA<WS.DATA.FT.DEBIT.ACCT.NO>
    Y.NO.FT = R.WS.DATA<WS.DATA.FT.NO.FT>

** GET ACCT DB AND ACCT CREDIT AND AMOUNT TRANSACTION

    CALL F.READ(FN.JRN.PAR, Y.UNIQUE.ID, R.JRN.PAR, F.JRN.PAR, ERR)
    Y.DESC.JOURNAL = R.JRN.PAR<JOURNAL.PAR.DESCRIPTION>
    Y.FLAG.OFS = R.JRN.PAR<JOURNAL.PAR.PARAM.INPUT.OFS>
    Y.DEBIT.ACCT.TYPE  = R.JRN.PAR<JOURNAL.PAR.DB.ACCT.TYPE>
    Y.CREDIT.ACCT.TYPE  = R.JRN.PAR<JOURNAL.PAR.CR.ACCT.TYPE>
    Y.DEBIT.ACCT.CONST  = R.JRN.PAR<JOURNAL.PAR.DB.ACCT.CONST>
    Y.CREDIT.ACCT.CONST  = R.JRN.PAR<JOURNAL.PAR.CR.ACCT.CONST>

**MODIFIED ATILHM(20151223) GET NARATION TO CHARGES BALANCE ENQUIRY OFFUS FROM CHARGE DESC IN JOURNAL.PAR
    Y.PAY.DTLS = R.JRN.PAR<JOURNAL.PAR.CHRG.DESCRIPTION>

**GET ACCT DEBET
    BEGIN CASE
    CASE Y.DEBIT.ACCT.TYPE EQ 'CUST'
        Y.DB.CHG.ENQ = Y.DB.ACCT
    CASE Y.DEBIT.ACCT.TYPE EQ 'CON'
        Y.DB.CHG.ENQ = Y.DEBIT.ACCT.CONST
    END CASE

**GET ACCT CREDIT
    BEGIN CASE
    CASE Y.CREDIT.ACCT.TYPE EQ 'CUST'
        Y.CR.CHG.ENQ = Y.DB.ACCT
    CASE Y.CREDIT.ACCT.TYPE EQ 'CON'
        Y.CR.CHG.ENQ = Y.CREDIT.ACCT.CONST
    END CASE
**GET TRANSACTION TYPE
    Y.TRX.TYPE = R.JRN.PAR<JOURNAL.PAR.TRANSACTION.TYPE>
    IF Y.TRX.TYPE EQ '' THEN
        Y.TRX.TYPE = 'ACAO'
    END
**GET AMOUNT CHARGES
    Y.FEE.CHRG = R.JRN.PAR<JOURNAL.PAR.DEFAULT.AMT>

**GET DATA USER AND PASSWORD OFS.MESSAGE
    Y.ID.BATCH.CONF = 'BATCH.ENQ.CHG'

    CALL F.READ(FN.BATCH.CONF,Y.ID.BATCH.CONF, R.BATCH.CONF, F.BATCH.CONF, ERR)
    Y.USER.ID = R.BATCH.CONF<CONFIG.USER>
    Y.PASS = R.BATCH.CONF<CONFIG.PASSWORD>
    Y.CO.CODE = R.BATCH.CONF<CONFIG.COMP.CO>

    Y.TODAY = R.DATES(EB.DAT.TODAY)

    RETURN
*-----------------------
DO.PROCESS:
*-----------------------
    Y.DETAIL = ''
    OFS.MESSAGE = ''
    Y.MESSAGE = ''
    Y.OFS.OUT = ''
    Y.ERROR.LINE = ''

*SEL.STMT.PRINTED = "SELECT FBNK.ACCOUNT$HIS WITH @ID LIKE ":Y.DB.ACCT:"..."
*CALL EB.READLIST(SEL.STMT.PRINTED,SEL.LIST,'',NO.OF.REC,ERR)
*Y.ACCT.HIS = SEL.LIST<NO.OF.REC>
*CALL F.READ(FN.ACCT.HIST, Y.ACCT.HIS, R.ACCT.HIST, F.ACCT.HIST, ERR)

    CALL F.READ(FN.ACCL,Y.DB.ACCT,R.ACCL,F.ACCL,ERR.ACCL)
    IF NOT(ERR.ACCL) THEN
        Y.FLG.ACCT.HIS = "TRUE"
    END

*IF R.ACCT.HIST NE '' AND R.ACCT.HIST<AC.RECORD.STATUS> EQ 'CLOSED' THEN
*Y.FLG.ACCT.HIS = "TRUE"
*END
    CALL F.READ(FN.ACCT, Y.DB.ACCT, R.ACCT, F.ACCT, ERR)
    Y.INACT.FLAG = R.ACCT<AC.INACTIV.MARKER>

    Y.WORKING.BALANCE = R.ACCT<AC.WORKING.BALANCE>
    Y.CURRENCY = R.ACCT<AC.CURRENCY>
    Y.COND.GROUP = R.ACCT<AC.CONDITION.GROUP>
 
*get blocking amount 
	SEL.ACCT.LOCK = "SELECT ":FN.LOCK.AMT:" WITH ACCOUNT EQ ":Y.DB.ACCT
	CALL EB.READLIST(SEL.ACCT.LOCK, SEL.LIST, '',NO.OF.REC,ERR.SEL.ACCT)
	
	LOOP
		REMOVE Y.ID FROM SEL.LIST SETTING POS
		
		WHILE Y.ID:POS
		CALL F.READ(FN.LOCK.AMT, Y.ID, R.AC.LOCKED, F.LOCK.AMT, ERR.LOCK.AMT)
		Y.TODATE = R.AC.LOCKED<ACLOCK.TO.DATE>
		
		IF Y.TODATE GE TODAY OR Y.TODATE EQ '' THEN
			Y.LOCKED.AMT += R.AC.LOCKED<ACLOCK.AMOUNT>
		END
	REPEAT
	
	Y.LOCK.AMT = Y.LOCKED.AMT
* 
* get minimum balance
    CALL F.READ(FN.ACCT.GRP.COND,Y.COND.GROUP:Y.CURRENCY,R.AGC,F.ACCT.GRP.COND,ERR.GRP)

    Y.MIN.BAL = R.AGC<ACCT.GRP.MINIMUM.BAL>

    Y.AVAILABLE.AMT = Y.WORKING.BALANCE - Y.MIN.BAL - Y.LOCK.AMT

** if balance not enough, enquiry will throw error 
    IF Y.AVAILABLE.AMT LT Y.FEE.CHRG THEN
        Y.FLAG.MINUS = 'YES'
		ENQ.ERROR = 'FT-BALANCE.NOT.ENOUGH' ;*here is to call error in enquiry
    END
	ELSE
** else continue to post charge (FUNDS.TRANSFER)
		IF Y.FLAG.OFS EQ 'YES' AND R.ACCT NE '' AND Y.INACT.FLAG EQ '' AND Y.FLG.ACCT.HIS NE 'TRUE' THEN
	
			OFS.MSG.APPL = 'FUNDS.TRANSFER,IDI.WS.ENQ.CHG':'/I/PROCESS,'
	
			OFS.MSG.DATA = 'TRANSACTION.TYPE::=':Y.TRX.TYPE
			OFS.MSG.DATA := ',DEBIT.ACCT.NO::=':Y.DB.CHG.ENQ
			OFS.MSG.DATA := ',DEBIT.VALUE.DATE::=':Y.TODAY
			OFS.MSG.DATA := ',DEBIT.AMOUNT::=':Y.FEE.CHRG
			OFS.MSG.DATA := ',DEBIT.CURRENCY::=':'IDR'
			OFS.MSG.DATA := ',CREDIT.ACCT.NO::=':Y.CR.CHG.ENQ
			OFS.MSG.DATA := ',PAYMENT.DETAILS::=':Y.PAY.DTLS
			OFS.MSG.DATA := ',IN.PRM.ACC.NO::=':Y.IN.PRM.ACC
			OFS.MSG.DATA := ',IN.STAN::=':Y.IN.STAN
			OFS.MSG.DATA := ',IN.CHANNEL.ID::=':Y.IN.CHN.ID
			OFS.MSG.DATA := ',IN.TRNS.DT.TM::=':Y.TRNS.DTTM
			OFS.MSG.DATA := ',IN.TERMINAL.ID::=':Y.TERMINAL.ID
			OFS.MSG.DATA := ',IN.LOCATION::=':Y.LOCATION.ID
			OFS.MSG.DATA := ',IN.UNIQUE.ID::=':Y.UNIQUE.ID
			OFS.MSG.DATA := ',IN.REVERSAL.ID::=':Y.REV.ID
	
			OFS.MESSAGE = OFS.MSG.APPL:Y.USER.ID:'/':Y.PASS:'/,,':OFS.MSG.DATA
			Y.OFS.MESSAGE = OFS.MESSAGE
			Y.OFS.SOURCE = 'GEN.OFS.PROC'
			CALL OFS.GLOBUS.MANAGER(Y.OFS.SOURCE, Y.OFS.MESSAGE)
			Y.MESSAGE = Y.OFS.MESSAGE
**GET RESPONSE FROM OGM
			Y.NO.FT = FIELD(Y.OFS.MESSAGE,'/',1)
			Y.SUC.IND = FIELD(Y.OFS.MESSAGE, "/", 3)
			Y.SUC.IND = FIELD(Y.SUC.IND, ",", 1)
			Y.ERR.MSG = FIELD(Y.OFS.MESSAGE, ",", 2)
	
			IF Y.ERR.MSG = '' THEN
				Y.ERR.MSG = Y.OFS.MESSAGE
			END
	
*Y.NO.FT.TEMP = FIELD(Y.OFS.MESSAGE, "/", 4)
	
	
** WRITE TO TABLE IDIH.WS.DATA.FT.MAP
	
			BEGIN CASE
			CASE Y.SUC.IND NE "1"
				R.WS.DATA<WS.DATA.FT.IN.STATUS.REC> = "ERROR"
				R.WS.DATA<WS.DATA.FT.ERROR.DESC> = Y.ERR.MSG
				IF R.WS.DATA<WS.DATA.FT.NO.FT> EQ '' THEN
					R.WS.DATA<WS.DATA.FT.NO.FT> = Y.NO.FT
				END
**post error message
				ENQ.ERROR = Y.ERR.MSG
				IF R.WS.DATA<WS.DATA.FT.INPUTTER> EQ '' OR R.WS.DATA<WS.DATA.FT.AUTHORISER> EQ '' OR  R.WS.DATA<WS.DATA.FT.DATE.TIME> EQ '' THEN
					R.WS.DATA<WS.DATA.FT.INPUTTER> = 'TWS'
					R.WS.DATA<WS.DATA.FT.AUTHORISER> = 'TWS'
					X = OCONV(DATE(),"D-")
					Y.TIME.STAMP = FIELD(TIMEDATE(), " ", 1)
					DT = X[9,2]:X[1,2]:X[4,2]:Y.TIME.STAMP[1,2]:Y.TIME.STAMP[4,2]
					R.WS.DATA<WS.DATA.FT.DATE.TIME> = DT
				END
	
				IF R.WS.DATA<WS.DATA.FT.DEPT.CODE> EQ '' THEN
					R.WS.DATA<WS.DATA.FT.DEPT.CODE> = R.USER<EB.USE.DEPARTMENT.CODE>
				END
	
			CASE Y.SUC.IND EQ "1"
				IF R.WS.DATA<WS.DATA.FT.PAYMENT.DETAILS> EQ '' THEN
					R.WS.DATA<WS.DATA.FT.PAYMENT.DETAILS> =  Y.DESC.JOURNAL
				END
				R.WS.DATA<WS.DATA.FT.TRANSACTION.TYPE> = Y.TRX.TYPE
				R.WS.DATA<WS.DATA.FT.IN.STATUS.REC> = "SUCCESS"
				R.WS.DATA<WS.DATA.FT.NO.FT> = Y.NO.FT
				IF R.WS.DATA<WS.DATA.FT.INPUTTER> EQ '' OR R.WS.DATA<WS.DATA.FT.AUTHORISER> EQ '' OR  R.WS.DATA<WS.DATA.FT.DATE.TIME> EQ '' THEN
					R.WS.DATA<WS.DATA.FT.INPUTTER> = 'TWS'
					R.WS.DATA<WS.DATA.FT.AUTHORISER> = 'TWS'
					X = OCONV(DATE(),"D-")
					Y.TIME.STAMP = FIELD(TIMEDATE(), " ", 1)
					DT = X[9,2]:X[1,2]:X[4,2]:Y.TIME.STAMP[1,2]:Y.TIME.STAMP[4,2]
					R.WS.DATA<WS.DATA.FT.DATE.TIME> = DT
				END
	
				IF R.WS.DATA<WS.DATA.FT.DEPT.CODE> EQ '' THEN
					R.WS.DATA<WS.DATA.FT.DEPT.CODE> = R.USER<EB.USE.DEPARTMENT.CODE>
				END
			END CASE
	
			CALL F.WRITE(FN.WS.DATA,Y.REV.ID,R.WS.DATA)
			CALL JOURNAL.UPDATE('')
	
		END
	END
	
    RETURN
*--------------------------------------------
END

































